# The tidyverse  {#sec-tidyverse}

Up to now we have been manipulating vectors by reordering and subsetting them through indexing. However, once we start more advanced analyses, the preferred unit for data storage is not the vector but the data frame.  In this chapter we learn to work directly with data frames, which greatly facilitate the organization of information. We will be using data frames for the majority of this book. We will focus on a specific data format referred to as _tidy_ and on specific collection of packages that are particularly helpful for working with _tidy_ data referred to as the _tidyverse_.

We can load all the tidyverse packages at once by installing and loading the __tidyverse__ package:

```{r, message=FALSE, warning=FALSE, cache=FALSE}
library(tidyverse)
```

We will learn how to implement the tidyverse approach throughout the book, but before delving into the details, in this chapter we introduce some of the most widely used tidyverse functionality, starting with the __dplyr__ package for manipulating data frames and the __purrr__ package for working with functions. Note that the tidyverse also includes a graphing package, __ggplot2__, which we introduce later in @sec-ggplot2 in the Data Visualization part of the book, the __readr__ package discussed in @sec-importing-data, and many others. In this chapter, we first introduce the concept of _tidy data_ and then demonstrate how we use the tidyverse to work with data frames in this format. 

## Tidy data {#sec-tidy-data}

We say that a data table is in  _tidy_ format if each row represents one observation and columns represent the different variables available for each of these observations. The `murders` dataset is an example of a tidy data frame.

```{r, echo=FALSE, cache=FALSE}
library(dslabs)
head(murders)
```

Each row represent a state with each of the five columns providing a different variable related to these states: name, abbreviation, region, population, and total murders.

To see how the same information can be provided in different formats, consider the following example:

```{r, echo=FALSE}
tidy_data <- gapminder |> 
  filter(country %in% c("South Korea", "Germany") & !is.na(fertility)) |>
  select(country, year, fertility)
head(tidy_data, 6)
```

This tidy dataset provides fertility rates for two countries across the years. This is a tidy dataset because each row represents one observation with the three variables being country, year, and fertility rate. However, this dataset originally came in another format and was reshaped for the __dslabs__ package. Originally, the data was in the following format:


```{r, echo=FALSE, message=FALSE}
path <- system.file("extdata", package = "dslabs")
filename <- file.path(path, "fertility-two-countries-example.csv")
wide_data <- read_csv(filename)
select(wide_data, country, `1960`:`1962`) |> as.data.frame()
```

The same information is provided, but there are two important differences in the format: 1) each row includes several observations and 2) one of the variables, year, is stored in the header. For the tidyverse packages to be optimally used, data need to be reshaped into _tidy_ format, which you will learn to do in the Data Wrangling part of the book. Until then, we will use example datasets that are already in tidy format.

Although not immediately obvious, as you go through the book you will start to appreciate the advantages of working in a framework in which functions use tidy formats for both inputs and outputs. You will see how this permits the data analyst to focus on more important aspects of the analysis rather than the format of the data. 

:::{.callout-note}
You are ready to do exercises 1-4.
:::


## Refining data frames

The __dplyr__ package from the __tidyverse__ introduces functions that perform some of the most common operations when working with data frames and uses names for these functions that are relatively easy to remember. For instance, to change the data table by adding a new column, we use `mutate`.  To filter the data table to a subset of rows, we use `filter`. Finally, to subset the data by selecting specific columns, we use `select`.

### Adding columns 

We want all the necessary information for our analysis to be included in the data frame. The first task is to add the murder rates to our murders data frame.  The function `mutate`  takes the data frame as a first argument and the name and values of the variable as a second argument using the convention `name = values`. So, to add murder rates, we use:
 
```{r, message=FALSE}
murders <- mutate(murders, rate = total/population*100000)
```

Notice that here we used `total` and `population` inside the function, which are objects that are **not** defined in our workspace. But why don't we get an error?

This is one of __dplyr__'s main features. Functions in this package, such as `mutate`, know to look for variables in the data frame provided in the first argument. In the call to mutate above, `total` will have the values in `murders$total`. This approach makes the code much more readable. 

We can see that the new column is added:

```{r}
head(murders)
```


### Row-wise subsetting

Now suppose that we want to filter the data frame to only show the entries for which the murder rate is lower than 0.71. To do this we use the `filter` function, which takes the data frame as the first argument and then a conditional statement as the second. Like `mutate`, we can use the unquoted variable names from `murders` inside the function and it will know we mean the columns and not objects in the workspace.

```{r}
filter(murders, rate <= 0.71)
```


### Column-wise subsetting {#sec-tidyverse-col-subset}

Although our data frame only has six columns, some data frames include hundreds. If we want to view just a few, we can use the __dplyr__ `select` function. In the code below we select three columns, assign this to a new object and then filter the new object: 

```{r}
new_dataframe <- select(murders, state, region, rate)
filter(new_dataframe, rate <= 0.71)
```

In the call to `select`, the first argument `murders` is an object, but `state`, `region`, and `rate` are variable names. 

**dplyr** offers a series of helper functions to select columns based on their content. For example, the following code uses the function `where` to keep only the numeric columns:

```{r}
new_dataframe <- select(murders, where(is.numeric))
names(new_dataframe)
```

The helper functions  `starts_with`, `ends_with`, `contains`, `matches`, and `num_range` can be used to select columns based on their names. Here is an example showing all the rows that start with `r`:

```{r}
new_dataframe <- select(murders, starts_with("r"))
names(new_dataframe)
```

The helper function `everything` selects all columns.


### Transforming variables

The function `mutate` can also be used to transform variables. For example, the following code takes the log transformation of the population variable:

```{r}
#| eval: false
mutate(murders, population = log10(population))
```

Often, we need to apply the same transformation to several variables. The function `across` facilitates the operation. For example if want to log transform both population and total murders we can use:

```{r}
#| eval: false
mutate(murders, across(c(population, total), log10))
```

The helper functions come in handy when using across. An example is if we want to apply the same transformation to all numeric variables:

```{r}
#| eval: false
mutate(murders, across(where(is.numeric), log10))
```

or all character variables:

```{r}
#| eval: false
mutate(murders, across(where(is.character), tolower))
```


:::{.callout-note}
You are ready to do exercises 5-11.
:::


## The pipe

In R we can perform a series of operations, for example `select` and then `filter`, by sending the results of one function to another using what is called the _pipe operator_: `%>%`. Since R version 4.1.0, you can also use `|>`. Some details are included below. 

We wrote code in @sec-tidyverse-col-subset to show three variables (state, region, rate) for states that have murder rates below 0.71. To do this, we defined the intermediate object `new_dataframe`. In __dplyr__ we can write code that looks more like a description of what we want to do without intermediate objects: 

$$ \mbox{original data }
\rightarrow \mbox{ select }
\rightarrow \mbox{ filter } $$


For such an operation, we can use the pipe `|>`. The code looks like this:

```{r}
murders |> select(state, region, rate) |> filter(rate <= 0.71)
```

This line of code is equivalent to the two lines in @sec-tidyverse-col-subset What is going on here? 

In general, the pipe _sends_ the result of the left side of the pipe to be the first argument of the function on the right side of the pipe. Here is a very simple example:

```{r}
16 |> sqrt()
```
We can continue to pipe values along:

```{r}
16 |> sqrt() |> log2()
```
The above statement is equivalent to `log2(sqrt(16))`.

Remember that the pipe sends values to the first argument, so we can define other arguments as if the first argument is already defined:

```{r}
16 |> sqrt() |> log(base = 2)
```

Therefore, when using the pipe with data frames and __dplyr__, we no longer need to specify the required first argument since the __dplyr__ functions we have described all take the data as the first argument. In the code we wrote:

```{r, eval=FALSE}
murders |> select(state, region, rate) |> filter(rate <= 0.71)
```
`murders` is the first argument of the `select` function, and the new data frame (formerly `new_dataframe`) is the first argument of the `filter` function.

Note that the pipe works well with functions where the first argument is the input data. Functions in __tidyverse__ packages like __dplyr__ have this format and can be used easily with the pipe.


## Summarizing data

An important part of exploratory data analysis is summarizing data. The average and standard deviation are two examples of widely used summary statistics. More informative summaries can often be achieved by first splitting data into groups. In this section, we cover two new __dplyr__ verbs that make these computations easier: `summarize` and `group_by`. We learn to access resulting values using the `pull` function.  

```{r, message=FALSE, echo=FALSE}
library(tidyverse)
```

### The `summarize` funciton {#sec-summarize}

The `summarize` function in __dplyr__ provides a way to compute summary statistics with intuitive and readable code. We start with a simple example based on heights. The `heights` dataset includes heights and sex reported by students in an in-class survey. 

```{r}
library(dplyr)
library(dslabs)
```

The following code computes the average and standard deviation for females:

```{r}
s <- heights |> 
  filter(sex == "Female") |>
  summarize(average = mean(height), standard_deviation = sd(height))
s
```

This takes our original data frame as input, filters it to keep only females, and then produces a new summarized table with just the average and the standard deviation of heights. We get to choose the names of the columns of the resulting table. For example, above we decided to use `average` and `standard_deviation`, but we could have used other names just the same.

Because the resulting table stored in `s` is a data frame, we can access the components with the accessor `$`:

```{r}
s$average
s$standard_deviation
```

As with most other __dplyr__ functions, `summarize` is aware of the variable names and we can use them directly. So when inside the call to the `summarize` function we write `mean(height)`, the function is accessing the column with the name "height" and then computing the average of the resulting numeric vector. We can compute any other summary that operates on vectors and returns a single value. 

For another example of how we can use the `summarize` function, let's compute the average murder rate for the United States. Remember our data table includes total murders and population size for each state and we have already used __dplyr__ to add a murder rate column:

```{r}
murders <- murders |> mutate(rate = total/population*100000)
```

Remember that the US murder rate is **not** the average of the state murder rates:

```{r}
murders |>
  summarize(rate = mean(rate))
```

This is because in the computation above, the small states are given the same weight as the large ones. The US murder rate is the total number of murders in the US divided by the total US population. So the correct computation is:

```{r}
us_murder_rate <- murders |>
  summarize(rate = sum(total)/sum(population)*100000)
us_murder_rate
```

This computation counts larger states proportionally to their size which results in a larger value.


### Multiple summaries

Suppose we want three summaries from the same variable such as the median, minimum, and maximum heights. We can use `summarize` like this:
 
```{r}
heights |> summarize(median = median(height), min = min(height), max = max(height))
```

But we can obtain these three values with just one line using the `quantile` function: `quantile(x, c(0.5, 0, 1))` returns the median (50th percentile), the min (0th percentile), and max (100th percentile) of the vector `x`. Here we can't use `summarize` because it expects one value per row. Instead we have to use the `reframe` function:

```{r}
heights |> reframe(quantiles = quantile(height, c(0.5, 0, 1)))
```

However, if we want a column per summary, as the `summarize` call above,
we have to define a function that returns a data frame like this:

```{r}
median_min_max <- function(x){
  qs <- quantile(x, c(0.5, 0, 1))
  data.frame(median = qs[1], min = qs[2], max = qs[3])
}
```

Then we can call `summarize` as above:

```{r}
heights |> summarize(median_min_max(height))
```

### Group then summarize with `group_by` {#sec-group-by}

A common operation in data exploration is to first split data into groups and then compute summaries for each group. For example, we may want to compute the average and standard deviation for men's and women's heights separately. The `group_by` function helps us do this. 

If we type this:

```{r}
heights |> group_by(sex)
```

The result does not look very different from `heights`, except we see `Groups: sex [2]` when we print the object. Although not immediately obvious from its appearance, this is now a special data frame called a _grouped data frame_, and __dplyr__ functions, in particular `summarize`, will behave differently when acting on this object. Conceptually, you can think of this table as many tables, with the same columns but not necessarily the same number of rows, stacked together in one object. When we summarize the data after grouping, this is what happens:

```{r}
heights |> 
  group_by(sex) |>
  summarize(average = mean(height), standard_deviation = sd(height))
```

The `summarize` function applies the summarization to each group separately.

For another example, let's compute the median, minimum, and maximum murder rate in the four regions of the country using the `median_min_max` defined above:


```{r}
murders |> 
  group_by(region) |>
  summarize(median_min_max(rate))
```

### Extracting varialbes with `pull`

The `us_murder_rate` object defined in @sec-summarize represents just one number. Yet we are storing it in a data frame:

```{r}
class(us_murder_rate)
```

since, as most __dplyr__ functions, `summarize` always returns a data frame.

This might be problematic if we want to use this result with functions that require a numeric value. Here we show a useful trick for accessing values stored in data when using pipes: when a data object is piped that object and its columns can be accessed using the `pull` function. To get a number from the original data table with one additional line of code we can type:

```{r}
us_murder_rate <- murders |> 
  summarize(rate = sum(total)/sum(population)*100000) |>
  pull(rate)

us_murder_rate
```

which is now a numeric:

```{r}
class(us_murder_rate)
```

## Sorting

When examining a dataset, it is often convenient to sort the data frame by the different columns. We know about the `order` and `sort` function, but for ordering entire data frames, the __dplyr__ function `arrange` is useful. For example, here we order the states by population size:

```{r}
murders |> arrange(population) |> head()
```

With `arrange` we get to decide which column to sort by. To see the states sorted by murder rates, for example, we would use `arrange(rate)` instead.

Note that the default behavior is to order in ascending order. In __dplyr__, the function `desc` transforms a vector so that it is in descending order. To sort the data frame by murder rates in descending order, we can type:

```{r, eval=FALSE}
murders |> arrange(desc(rate)) 
```

### Nested sorting 

If we are ordering by a column with ties, we can use a second column to break the tie. Similarly, a third column can be used to break ties between first and second and so on. Here we order by `region`, then within region we order by murder rate:

```{r}
murders |> 
  arrange(region, rate) |> 
  head()
```


### The top $n$ 

In the code above, we have used the function `head` to avoid having the page fill up with the entire dataset. For instance, using `arrange(desc(rate))` followed by `head` would show the 6 states with the largest murder rates, in order. Instead, to view a specific number of observations with the highest murder rates, we can use the `top_n` function. This function takes a data frame as it's first argument, the number of rows to show in the second, and the variable to filter by in the third. Here is an example of how to see the top 5 rows:

```{r}
murders |> top_n(5, rate)
```

Note that rows are not sorted by `rate`, only filtered. If we want to sort, we still need to use `arrange`. Note that if the third argument is left blank, `top_n` filters by the last column.


:::{.callout-note}
You are ready to do exercises 12-19.
:::

## Tibbles

To work with the tidyverse, data must be stored in data frames. We introduced the data frame in @sec-data-frames and have been using the `murders` data frame throughout the book. In @sec-group-by we introduced the `group_by` function, which permits stratifying data before computing summary statistics. But where is the group information stored in the data frame? 

```{r}
murders |> group_by(region)
```

Notice that there are no columns with this information. But, if you look closely at the output above, you see the line `A tibble` followed by dimensions. We can learn the class of the returned object using:

```{r}
murders |> group_by(region) |> class()
```

The `tbl`, pronounced "tibble", is a special kind of data frame. The functions `group_by` and `summarize` always return this type of data frame. The `group_by` function returns a special kind of `tbl`, the `grouped_df`. We will say more about these later. For consistency, the __dplyr__ manipulation verbs (`select`, `filter`, `mutate`, and `arrange`) preserve the class of the input: if they receive a regular data frame they return a regular data frame, while if they receive a tibble they return a tibble. But tibbles are the preferred format in the tidyverse and as a result tidyverse functions that produce a data frame from scratch return a tibble. For example, in @sec-importing-data we will see that tidyverse functions used to import data create tibbles.


## Tibbles versus data frames

Tibbles are very similar to data frames. In fact, you can think of them as a modern version of data frames. Nonetheless there are some important differences which we describe next.


**\(1\) Tibbles display better** 

The print method for tibbles is more readable than that of a data frame. To see this, compare the outputs of typing `murders` and the output of murders if we convert it to a tibble. We can do this using `as_tibble(murders)`. If using RStudio, output for a tibble adjusts to your window size. To see this, change the width of your R console and notice how more/less columns are shown.


If you subset the columns of a data frame, you may get back an object that is not a data frame, such as a vector or scalar. For example:

```{r}
class(murders[,4])
```

is not a data frame. With tibbles this does not happen:

```{r}
class(as_tibble(murders)[,4])
```

This is useful in the tidyverse since functions require data frames as input. 

With tibbles, if you want to access the vector that defines a column, and not get back a data frame, you need to use the accessor `$`:

```{r}
class(as_tibble(murders)$population)
```

A related feature is that tibbles will give you a warning if you try to access a column that does not exist. If we accidentally write `Population` instead of `population` this:

```{r}
murders$Population
```

returns a `NULL` with no warning, which can make it harder to debug. In contrast, if we try this with a tibble we get an informative warning:

```{r}
as_tibble(murders)$Population
```


**\(2\) Tibbles can have complex entries**

While data frame columns need to be vectors of numbers, strings, or logical values, tibbles can have more complex objects, such as lists or functions. Also, we can create tibbles with functions:

```{r}
tibble(id = c(1, 2, 3), func = c(mean, median, sd))
```


**\(3\) Tibbles can be grouped**

The function `group_by` returns a special kind of tibble: a grouped tibble. This class stores information that lets you know which rows are in which groups. The tidyverse functions, in particular the `summarize` function, are aware of the group information. 

### Creating tibbles

It is sometimes useful for us to create our own data frames. To create a data frame in the tibble format, you can do this by using the `tibble` function.   

```{r}
grades <- tibble(names = c("John", "Juan", "Jean", "Yao"), 
                     exam_1 = c(95, 80, 90, 85), 
                     exam_2 = c(90, 85, 85, 90))
```

Note that base R (without packages loaded) has the `data.frame` function that can be used to create a regular data frame rather than a tibble.  


```{r}
grades <- data.frame(names = c("John", "Juan", "Jean", "Yao"), 
                     exam_1 = c(95, 80, 90, 85), 
                     exam_2 = c(90, 85, 85, 90))
```


To convert a regular data frame to a tibble, you can use the  `as_tibble` function. 

```{r}
as_tibble(grades) |> class()
```

## The placeholder

One of the advantages of using the pipe `|>` is that we do not have to keep naming new objects as we manipulate the data frame. The object on the left-hand side of the pipe is used as the first argument of the function on the right-hand side of the pipe. But what if we want to pass it as argument to the right-hand side function that is not the first? The answer is the placeholder operator `_` (for the `%>%` pipe the placeholder is `.`). Below is a simple example that passes the `base` argument to the `log` function. The following three are equivalent:

```{r, eval=FALSE}
log(8, base = 2)
2 |> log(8, base = _)
2 %>% log(8, base = .)
```


## The __purrr__ package

In @sec-vectorization we learned about the `sapply` function, which permitted us to apply the same function to each element of a vector. We constructed a function and used `sapply` to compute the sum of the first `n` integers for several values of `n` like this:


```{r}
compute_s_n <- function(n) {
  sum(1:n)
}
n <- 1:25
s_n <- sapply(n, compute_s_n)
```

This type of operation, applying the same function or procedure to elements of an object, is quite common in data analysis. The __purrr__ package includes functions similar to `sapply` but that better interact with other tidyverse functions. The main advantage is that we can better control the output type of functions. In contrast, `sapply` can return several different object types; for example, we might expect a numeric result from a line of code, but `sapply` might convert our result to character under some circumstances. __purrr__ functions will never do this: they will return objects of a specified type or return an error if this is not possible. 

The first __purrr__ function we will learn is `map`, which works very similar to `sapply` but always, without exception, returns a list:

```{r}
library(purrr)
s_n <- map(n, compute_s_n)
class(s_n)
```

If we want a numeric vector, we can instead use `map_dbl` which always returns a vector of numeric values. 

```{r}
s_n <- map_dbl(n, compute_s_n)
class(s_n)
```

This produces the same results as the `sapply` call shown above.

A particularly useful __purrr__ function for interacting with the rest of the tidyverse is `map_df`, which always returns a tibble data frame. However, the function being called needs to return a vector or a list with names. For this reason, the following code would result in a `Argument 1 must have names` error:

```{r, eval=FALSE}
s_n <- map_df(n, compute_s_n)
```

The function needs to return a data frame to make this work:

```{r}
compute_s_n <- function(n) {
  tibble(sum = sum(1:n))
}
s_n <- map_df(n, compute_s_n)
```

The __purrr__ package provides much more functionality not covered here. For more details you can consult [this online resource](https://jennybc.github.io/purrr-tutorial/)[^tidyverse-1].

[^tidyverse-1]: <https://jennybc.github.io/purrr-tutorial/>

## Tidyverse conditionals

A typical data analysis will often involve one or more conditional operations. In @sec-conditionals we described the `ifelse` function, which we will use extensively in this book. In this section we present two __dplyr__ functions that provide further functionality for performing conditional operations.

### `case_when`

The `case_when` function is useful for vectorizing conditional statements. It is similar to `ifelse` but can output any number of values, as opposed to just `TRUE` or `FALSE`. Here is an example splitting numbers into negative, positive, and 0:

```{r}
x <- c(-2, -1, 0, 1, 2)
case_when(x < 0 ~ "Negative", 
          x > 0 ~ "Positive", 
          TRUE  ~ "Zero")
```

A common use for this function is to define categorical variables based on existing variables. For example, suppose we want to compare the murder rates in four groups of states: _New England_, _West Coast_, _South_,  and _other_. For each state, we need to ask if it is in New England, if it is not we ask if it is in the West Coast, if not we ask if it is in the South, and if not we assign _other_. Here is how we use `case_when` to do this:

```{r}
murders |> 
  mutate(group = case_when(
    abb %in% c("ME", "NH", "VT", "MA", "RI", "CT") ~ "New England",
    abb %in% c("WA", "OR", "CA") ~ "West Coast",
    region == "South" ~ "South",
    TRUE ~ "Other")) |>
  group_by(group) |>
  summarize(rate = sum(total)/sum(population)*10^5) 
```

### `between`

A common operation in data analysis is to determine if a value falls inside an interval. We can check this using conditionals. For example, to check if the elements of a vector `x` are between `a` and `b` we can type

```{r, eval=FALSE}
x >= a & x <= b
```

However, this can become cumbersome, especially within the tidyverse approach. The  `between` function performs the same operation.

```{r, eval = FALSE}
between(x, a, b)
```

## Exercises 

1\. Examine the built-in dataset `co2`. Which of the following is true:

a. `co2` is tidy data: it has one year for each row.
b. `co2` is not tidy: we need at least one column with a character vector.
c. `co2` is not tidy:  it is a matrix instead of a data frame.
d. `co2` is not tidy: to be tidy we would have to wrangle it to have three columns (year, month and value), then each co2 observation would have a row.


2\. Examine the built-in dataset  `ChickWeight`. Which of the following is true:

a.  `ChickWeight` is not tidy: each chick has more than one row. 
b.  `ChickWeight` is tidy: each observation (a weight) is represented by one row. The chick from which this measurement came is one of the variables.
c.  `ChickWeight` is not tidy: we are missing the year column.
d.  `ChickWeight` is tidy: it is stored in a data frame.


3\. Examine the built-in dataset `BOD`. Which of the following is true:

a. `BOD` is not tidy: it only has six rows.
b. `BOD` is not tidy: the first column is just an index.
c. `BOD` is tidy: each row is an observation with two values (time and demand)
d. `BOD` is tidy: all small datasets are tidy by definition.


4\. Which of the following built-in datasets is tidy (you can pick more than one):

a. `BJsales`
b. `EuStockMarkets`
d. `DNase`
d. `Formaldehyde`
e. `Orange`
f. `UCBAdmissions`

5\. Load the __dplyr__ package and the murders dataset.

```{r, eval=FALSE}
library(dplyr)
library(dslabs)
```

You can add columns using the __dplyr__ function `mutate`. This function is aware of the column names and inside the function you can call them unquoted:


```{r, eval=FALSE}
murders <- mutate(murders, population_in_millions = population/10^6)
```

We can write `population` rather than `murders$population`. The function `mutate` knows we are grabbing columns from `murders`.

Use the function `mutate` to add a murders column named `rate` with the per 100,000 murder rate as in the example code above. Make sure you redefine `murders` as done in the example code above (`murders <- [your code]`) so we can keep using this variable.

6\. If `rank(x)` gives you the ranks of `x` from lowest to highest, `rank(-x)` gives you the ranks from highest to lowest. Use the function `mutate` to add a column `rank` containing the rank of murder rate from highest to lowest. Make sure you redefine `murders` so we can keep using this variable.



7\. With __dplyr__, we can use `select` to show only certain columns. For example, with this code we would only show the states and population sizes:

```{r, eval=FALSE}
select(murders, state, population)
```

Use `select` to show the state names and abbreviations in `murders`. Do not redefine `murders`, just show the results.


8\. The __dplyr__ function `filter` is used to choose specific rows of the data frame to keep. Unlike `select` which is for columns, `filter` is for rows. For example, you can show just the New York row like this:

```{r, eval=FALSE}
filter(murders, state == "New York")
```

You can use other logical vectors to filter rows.

Use `filter` to show the top 5 states with the highest murder rates. From here on, do not change the murders dataset, just show the result. Remember that you can filter based on the `rank` column.

 
9\. We can remove rows using the `!=` operator. For example, to remove Florida, we would do this:

```{r, eval=FALSE}
no_florida <- filter(murders, state != "Florida")
```

Create a new data frame called `no_south` that removes states from the South region. How many states are in this category? You can use the function `nrow` for this.


10\. We can also use `%in%` to filter with __dplyr__. You can therefore see the data from New York and Texas like this:

```{r, eval=FALSE}
filter(murders, state %in% c("New York", "Texas"))
```

Create a new data frame called `murders_nw` with only the states from the Northeast and the West.  How many states are in this category? 


11\. Suppose you want to live in the Northeast or West **and** want the murder rate to be less than 1. We want to see the data for the states satisfying these options. Note that you can use logical operators like `&` with `filter`. Here is an example in which we filter to keep only small states in the Northeast region.

```{r, eval=FALSE}
filter(murders, population < 5000000 & region == "Northeast")
```

Make sure `murders` has been defined with `rate` and `rank` and still has all states. Create a table called `my_states` that contains rows for states satisfying both the conditions: it is in the Northeast or West and the murder rate is less than 1.  Use `select` to show only the state name, the rate, and the rank.


12\. The pipe `|>` can be used to perform operations sequentially without having to define intermediate objects. Start by redefining `murders` to include rate and rank.

```{r, eval=FALSE}
murders <- mutate(murders, rate =  total/population*100000, 
                  rank = rank(-rate))
```

In the solution to the previous exercise, we did the following:
```{r, eval=FALSE}
my_states <- filter(murders, region %in% c("Northeast", "West") & 
                      rate < 1)

select(my_states, state, rate, rank)
```

The pipe `|>` permits us to perform both operations sequentially without having to define an intermediate variable `my_states`. We therefore could have mutated and selected in the same line like this:

```{r, eval=FALSE}
mutate(murders, rate =  total/population*100000, 
       rank = rank(-rate)) |>
  select(state, rate, rank)
```

Notice that `select` no longer has a data frame as the first argument. The first argument is assumed to be the result of the operation conducted right before the  `|>`.
    
Repeat the previous exercise, but now instead of creating a new object, show the result and only include the state, rate, and rank columns. Use a pipe `|>` to do this in just one line.

    
```{r, eval=FALSE}
my_states <- murders |>
  mutate SOMETHING |> 
  filter SOMETHING |> 
  select SOMETHING
```


13\. For exercises 13-19, we will be using the data from the survey collected by the United States National Center for Health Statistics (NCHS). This center has conducted a series of health and nutrition surveys since the 1960’s. Starting in 1999, about 5,000 individuals of all ages have been interviewed every year and they complete the health examination component of the survey. Part of the data is made available via the __NHANES__ package. Once you install the __NHANES__ package, you can load the data like this:

```{r}
library(NHANES)
```

The __NHANES__ data has many missing values. The `mean` and `sd` functions in R will return `NA` if any of the entries of the input vector is an `NA`. Here is an example:

```{r}
library(dslabs)
mean(na_example)
sd(na_example)
```

To ignore the `NA`s we can use the `na.rm` argument:

```{r}
mean(na_example, na.rm = TRUE)
sd(na_example, na.rm = TRUE)
```

Let's now explore the NHANES data.

We will provide some basic facts about blood pressure. First let's select a group to set the standard. We will use 20-to-29-year-old females. `AgeDecade` is a categorical variable with these ages. Note that the category is coded like `" 20-29"`, with a space in front! What is the average and standard deviation of systolic blood pressure as saved in the `BPSysAve` variable? Save it to a variable called `ref`.

Hint: Use `filter` and `summarize` and use the `na.rm = TRUE` argument when computing the average and standard deviation. You can also filter the NA values using `filter`.


14\. Using a pipe, assign the average to a numeric variable `ref_avg`. Hint: Use the code from the previous exercise and then `pull`.


15\. Now report the min and max values for the same group.


16\. Compute the average and standard deviation for females, but for each age group separately rather than a selected decade as in exercise 13. Note that the age groups are defined by `AgeDecade`. Hint: rather than filtering by age and gender, filter by `Gender` and then use `group_by`.

17\. Repeat exercise 16 for males. 


19\. For males between the ages of 40-49, compare systolic blood pressure across race as reported in the `Race1` variable. Order the resulting table from lowest to highest average systolic blood pressure.


20\. Load the `murders` dataset. Which of the following is true?

a. `murders` is in tidy format and is stored in a tibble.
b. `murders` is in tidy format and is stored in a data frame.
c. `murders` is not in tidy format and is stored in a tibble.
d. `murders` is not in tidy format and is stored in a data frame.
    
21\. Use `as_tibble` to convert the `murders` data table into a tibble and save it in an object called `murders_tibble`.
    
22\. Use the `group_by` function to convert `murders` into a tibble that is grouped by region.

23\. Write tidyverse code that is equivalent to this code:
    
```{r, eval=FALSE}
exp(mean(log(murders$population)))
```

Write it using the pipe so that each function is called without arguments. Use the dot operator to access the population. Hint: The code should start with `murders |>`.
    
24\. Use the `map_df` to create a data frame with three columns named `n`, `s_n`, and `s_n_2`. The first column should contain the numbers 1 through 100. The second and third columns should each contain the sum of 1 through $n$ with $n$ the row number.  
