# Parsing dates and times {#sec-dates-and-times}

We have described three main types of vectors: numeric, character, and logical. When analyzing data, we often encounter variables that are dates. Although we can represent a date with a string, for example `November 2, 2017`, once we pick a reference day, referred to as the _epoch_ by computer programmers, they can be converted to numbers by calculating the number of days since the epoch. In R and Unix, the epoch is defined as January 1, 1970. So, for example, January 2, 1970 is day 1, December 31, 1969 is day -1, and November 2, 2017, is day 17,204. 

Now how should we represent dates and times when analyzing data in R? We could just use days since the epoch, but then it is almost impossible to interpret. If I tell you it's November 2, 2017, you know what this means immediately. If I tell you it's day 17,204, you will be quite confused. Similar problems arise with times and even more complications can appear due to time zones. For this reason, R defines a data type just for dates and times. 

## The date data type

We can see an example of the data type R uses for data here:

```{r,  message=FALSE, warning=FALSE}
library(tidyverse)
library(dslabs)
polls_us_election_2016$startdate |> head()
```

The dates look like strings, but they are not:

```{r}
class(polls_us_election_2016$startdate)
```

Look at what happens when we convert them to numbers:

```{r}
as.numeric(polls_us_election_2016$startdate) |> head()
```

It turns them into days since the epoch. The `as.Date` function can convert a character into a date. So to see that the epoch is day 0 we can type

```{r}
as.Date("1970-01-01") |> as.numeric()
```

Plotting functions, such as those in ggplot, are aware of the date format. This means that, for example, a scatterplot can use the numeric representation to decide on the position of the point, but include the string in the labels:

```{r rawpolls-vs-time}
polls_us_election_2016 |> filter(pollster == "Ipsos" & state == "U.S.") |>
  ggplot(aes(startdate, rawpoll_trump)) +
  geom_line()
```

Note in particular that the month names are displayed, a very convenient feature.

## The lubridate package {#sec-lubridate}

The __lubridate__ package provides tools to work with date and times.

```{r, warning=FALSE, message=FALSE, cache=FALSE}
library(lubridate)
```

We will take a random sample of dates to show some of the useful things one can do:

```{r}
set.seed(2002)
dates <- sample(polls_us_election_2016$startdate, 10) |> sort()
dates
```

The functions `year`, `month` and `day` extract those values:

```{r}
tibble(date = dates, month = month(dates), day = day(dates), year = year(dates))
```

We can also extract the month labels:

```{r, eval=FALSE}
month(dates, label = TRUE)
```

```{r, echo=FALSE}
lubridate::month(dates, label = TRUE)
```


Another useful set of functions are the _parsers_ that convert strings into dates. The function `ymd` assumes the dates are in the format YYYY-MM-DD and tries to parse as well as possible.

```{r}
x <- c(20090101, "2009-01-02", "2009 01 03", "2009-1-4",
       "2009-1, 5", "Created on 2009 1 6", "200901 !!! 07")
ymd(x)
```

A further complication comes from the fact that dates often come in different formats in which the order of year, month, and day are different. The preferred format is to show year (with all four digits), month (two digits), and then day, or what is called the ISO 8601. Specifically we use YYYY-MM-DD so that if we order the string, it will be ordered by date. You can see the function `ymd` returns them in this format.

But, what if you encounter dates such as "09/01/02"? This could be September 1, 2002 or January 2, 2009 or January 9, 2002. 
In these cases, examining the entire vector of dates will help you determine what format it is by process of elimination. Once you know, you can use the many parses provided by __lubridate__.

For example, if the string is:

```{r}
x <- "09/01/02"
```

The `ymd` function assumes the first entry is the year, the second is the month, and the third is the day, so it converts it to:

```{r}
ymd(x)
```

The `mdy` function assumes the first entry is the month, then the day, then the year:

```{r}
mdy(x)
```

The _lubridate_ package provides a function for every possibility. Here is the other common one:
```{r}
dmy(x)
```

The __lubridate__ package is also useful for dealing with times. In base R, you can get the current time typing `Sys.time()`. The __lubridate__ package provides a slightly more advanced function, `now`, that permits you to define the time zone:

```{r}
now()
now("GMT")
```

You can see all the available time zones with `OlsonNames()` function.

We can also extract hours, minutes, and seconds: 

```{r}
now() |> hour()
now() |> minute()
now() |> second()
```

The package also includes a function to parse strings into times as well as parsers for time objects that include dates:


```{r}
x <- c("12:34:56")
hms(x)
x <- "Nov/2/2012 12:34:56"
mdy_hms(x)
```

This package has many other useful functions. We describe two of these here that we find particularly useful.

The `make_date` function can be used to quickly create a date object. It can take up to seven arguments: year, month, day, hour, minute, seconds, and time zone defaulting to the epoch values on UTC time. To create an date object representing, for example, July 6, 2019 we write:

```{r}
make_date(2019, 7, 6)
```

To make a vector of January 1 for the 80s we write:

```{r}
make_date(1980:1989)
```

Another very useful function is `round_date`. It can be used to _round_ dates to nearest year, quarter,  month, week, day, hour, minutes, or seconds. So if we want to group all the polls by week of the year we can do the following:

```{r poll-margin-versus-week}
polls_us_election_2016 |> 
  mutate(week = round_date(startdate, "week")) |>
  group_by(week) |>
  summarize(margin = mean(rawpoll_clinton - rawpoll_trump)) |>
  ggplot(aes(week, margin)) +
  geom_point()
```

Finally, you should be aware the there are useful function for computing operations on time such a `difftime`, `time_length`, and `interval`.

## Dates and times with data.table

The **data.table** package includes some of the same functionality as **lubridate**. For example, it includes the `month`, and `year` functions that are the same as those in **lubridate**. The equilvalent of **lubridate**'s `day` is `mday`:

```{r, message=FALSE, warning=FALSE}
library(data.table)
st <- as.Date("2024-03-04")
day(st)
mday(st)
```

Other similar functions included in **data.table** are `second`, `minute`, `hour`, `yday`, `wday`, `week`, 
`isoweek` and `quarter`.

The package also includes the classes `IDate` and `ITime`, which store dates and times more efficiently than `lubridate` and base R. This convenient for large files with date stamps. You can convert dates in the usual R format: using `as.IDate` and `as.ITime`. You can see this by using the `object.size` function:

```{r}
object.size(polls_us_election_2016$startdate)
object.size(as.IDate(polls_us_election_2016$startdate))
```


## Exercises

For these exercises we will use the following dataset:

```{r}
#| eval: false
library(dslabs)
head(pr_death_counts)
```

1\. We want to make a plot of death counts versus date. Confirm that the `date` variable are in fact dates and not strings.

2\. Plot deaths versus date. 

3\. What time period is represented in these data?

4\. Note that after May 31, 2018, the deaths are all 0. The data is probably not entered yet. We also see a drop off starting around May 1. Redefine `dat` to exclude observations taken on or after May 1, 2018. Then, remake the plot.

5\. Repeat the plot but use the day of the year on the x-axis instead of date.
 
6\. Compute the deaths per day by month.

7\. Show the deaths per days for July and for September. What do you notice?

8\. Compute deaths per week and make a plot.
