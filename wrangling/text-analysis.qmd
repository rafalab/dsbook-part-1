# Text analysis

With the exception of labels used to represent categorical data, we have focused on numerical data. But in many applications, data starts as text. Well-known examples are spam filtering, cyber-crime prevention, counter-terrorism and sentiment analysis. In all these cases, the raw data is composed of free form text. Our task is to extract insights from these data. In this section, we learn how to generate useful numerical summaries from text data to which we can apply some of the powerful data visualization and analysis techniques we have learned.

## Case study: Trump tweets

During the 2016 US presidential election, then candidate Donald J. Trump used his twitter account as a way to communicate with potential voters. On August 6, 2016, Todd Vaziri tweeted[^text-analysis-1] about Trump that "Every non-hyperbolic tweet is from iPhone (his staff). Every hyperbolic tweet is from Android (from him)." David Robinson conducted an analysis[^text-analysis-2] to determine if data supported this assertion. Here, we go through David's analysis to learn some of the basics of text analysis. To learn more about text analysis in R, we recommend the Text Mining with R book[^text-analysis-3] by Julia Silge and David Robinson.

[^text-analysis-1]: <https://twitter.com/tvaziri/status/762005541388378112/photo/1>

[^text-analysis-2]: <http://varianceexplained.org/r/trump-tweets/>

[^text-analysis-3]: <https://www.tidytextmining.com/>

```{r,echo=FALSE}
set.seed(2002)
```

We will use the following libraries:

```{r, message=FALSE, warning=FALSE}
library(tidyverse)
library(scales)
library(tidytext)
library(textdata)
library(dslabs)
```

X, formerly known as twitter, provides an API that permits downloading tweets. Brendan Brown runs the trump archive^[<https://www.thetrumparchive.com/>], which compiles tweet data from Trump's account. The **dslabs** package includes tweets from the following range:

```{r}
range(trump_tweets$created_at)
```

The data frame includes the the following variables:

```{r}
names(trump_tweets)
```

The help file `?trump_tweets` provides details on what each variable represents. The actual tweets are in the `text` variable:

```{r}
trump_tweets$text[16413] |> str_wrap(width = options()$width) |> cat()
```

and the source variable tells us which device was used to compose and upload each tweet:

```{r}
trump_tweets |> count(source) |> arrange(desc(n)) |> head(5)
```

We are interested in what happened during the 2016 campaign, so for this analysis we will focus on what was tweeted between the day Trump announced his campaign and election day. We define the following table containing just the tweets from that time period. We remove the `Twitter for` part of the source, only keep tweets from Android or iPhone, and filter out retweets.

```{r}
campaign_tweets <- trump_tweets |> 
  filter(source %in% paste("Twitter for", c("Android", "iPhone")) &
           created_at >= ymd("2015-06-17") & 
           created_at < ymd("2016-11-08")) |>
  mutate(source = str_remove(source, "Twitter for ")) |>
  filter(!is_retweet) |>
  arrange(created_at) |> 
  as_tibble()
```

We can now use data visualization to explore the possibility that two different groups were tweeting from these devices. For each tweet, we will extract the hour, Eastern Standard Time (EST), it was tweeted and then compute the proportion of tweets tweeted at each hour for each device:

```{r tweets-by-time-by-device}
campaign_tweets |>
  mutate(hour = hour(with_tz(created_at, "EST"))) |>
  count(source, hour) |>
  group_by(source) |>
  mutate(percent = n / sum(n)) |>
  ungroup() |>
  ggplot(aes(hour, percent, color = source)) +
  geom_line() +
  geom_point() +
  scale_y_continuous(labels = percent_format()) +
  labs(x = "Hour of day (EST)", y = "% of tweets", color = "")
```

We notice a big peak for the Android in the early hours of the morning, between 6 and 8 AM. There seems to be a clear difference in these patterns. We will therefore assume that two different entities are using these two devices.

We will now study how the text of the tweets differ when we compare Android to iPhone. To do this, we introduce the **tidytext** package.

## Text as data

The **tidytext** package helps us convert free form text into a tidy table. Having the data in this format greatly facilitates data visualization and the use of statistical techniques.

The main function needed to achieve this is `unnest_tokens`. A *token* refers to a unit that we are considering to be a data point. The most common *token* will be words, but they can also be single characters, n-grams, sentences, lines, or a pattern defined by a regex. The function will take a vector of strings and extract the tokens so that each one gets a row in the new table. Here is a simple example:

```{r}
poem <- c("Roses are red,", "Violets are blue,", 
          "Sugar is sweet,", "And so are you.")
example <- tibble(line = c(1, 2, 3, 4),
                      text = poem)
example
example |> unnest_tokens(word, text)
```

Now let's look at Trump's tweets. We will look at tweet number 3008 because it will later permit us to illustrate a couple of points:

```{r}
i <- 3008
campaign_tweets$text[i] |> str_wrap(width = 65) |> cat()
campaign_tweets[i,] |> 
  unnest_tokens(word, text) |>
  pull(word) 
```

Note that the function tries to convert tokens into words. A minor adjustment is to remove the links to pictures:

```{r, message=FALSE, warning=FALSE}
links_to_pics <- "https://t.co/[A-Za-z\\d]+|&amp;"
campaign_tweets[i,] |> 
  mutate(text = str_remove_all(text, links_to_pics))  |>
  unnest_tokens(word, text) |>
  pull(word)
```

Now we are now ready to extract the words from all our tweets.

```{r, message=FALSE, warning=FALSE}
tweet_words <- campaign_tweets |> 
  mutate(text = str_remove_all(text, links_to_pics))  |>
  unnest_tokens(word, text)
```

And we can now answer questions such as "what are the most commonly used words?":

```{r}
tweet_words |> 
  count(word) |>
  arrange(desc(n))
```

It is not surprising that these are the top words, which are not informative. The *tidytext* package has a database of these commonly used words, referred to as *stop words*, in text analysis:

```{r}
head(stop_words)
```

If we filter out rows representing stop words with `filter(!word %in% stop_words$word)`:

```{r, message=FALSE, warning=FALSE}
tweet_words <- campaign_tweets |> 
  mutate(text = str_remove_all(text, links_to_pics))  |>
  unnest_tokens(word, text) |>
  filter(!word %in% stop_words$word ) 
```

we end up with a much more informative set of top 10 tweeted words:

```{r}
tweet_words |> 
  count(word) |>
  slice_max(n, n = 10) |>
  arrange(desc(n))
```

Some exploration of the resulting words (not shown here) reveals a couple of unwanted characteristics in our tokens. First, some of our tokens are just numbers (years, for example). We want to remove these and we can find them using the regex `^\d+$`. Second, some of our tokens come from a quote and they start with `'`. We want to remove the `'` when it is at the start of a word so we will just `str_replace`. We add these two lines to the code above to generate our final table:

```{r, message=FALSE, warning=FALSE}
tweet_words <- campaign_tweets |> 
  mutate(text = str_remove_all(text, links_to_pics))  |>
  unnest_tokens(word, text) |>
  filter(!word %in% stop_words$word &
           !str_detect(word, "^\\d+$")) |>
  mutate(word = str_replace(word, "^'", ""))
```

Now that we have all our words in a table, along with information about what device was used to compose the tweet they came from, we can start exploring which words are more common when comparing Android to iPhone.

For each word, we want to know if it is more likely to come from an Android tweet or an iPhone tweet. We therefore compute, for each word, its frequency among words tweeted from Android and iPhone, respectively and then derive the ratio of these proportions (Android proportion divided by iPhone proportion). Because some words are infrequent, we apply the continuity correction described in @sec-log-transform:

```{r}
android_vs_iphone <- tweet_words |>
  count(word, source) |>
  pivot_wider(names_from = "source", values_from = "n", values_fill = 0) |>
  mutate(p_a = (Android + 0.5)/(sum(Android) + 0.5), 
         p_i = (iPhone + 0.5)/(sum(iPhone) + 0.5),  
         ratio = p_a / p_i)
```

For words appearing at least 100 times in total, here are the highest percent differences for Android

```{r}
android_vs_iphone |> filter(Android + iPhone >= 100) |> arrange(desc(ratio))
```

and the top for iPhone:

```{r}
android_vs_iphone |> filter(Android + iPhone >= 100) |>  arrange(ratio)
```

We already see somewhat of a pattern in the types of words that are being tweeted more from one device versus the other. However, we are not interested in specific words but rather in the tone. Vaziri's assertion is that the Android tweets are more hyperbolic. So how can we check this with data? *Hyperbolic* is a hard sentiment to extract from words as it relies on interpreting phrases. However, words can be associated to more basic sentiment such as anger, fear, joy, and surprise. In the next section, we demonstrate basic sentiment analysis.

## Sentiment analysis

In sentiment analysis, we assign a word to one or more "sentiments". Although this approach will miss context-dependent sentiments, such as sarcasm, when performed on large numbers of words, summaries can provide insights.

The first step in sentiment analysis is to assign a sentiment to each word. As we demonstrate, the **tidytext** package includes several maps or lexicons. The **textdata** package includes several of these lexicons.

The `bing` lexicon divides words into `positive` and `negative` sentiments. We can see this using the *tidytext* function `get_sentiments`:

```{r, eval=FALSE}
get_sentiments("bing")
```

The `AFINN` lexicon assigns a score between -5 and 5, with -5 the most negative and 5 the most positive. Note that this lexicon needs to be downloaded the first time you call the function `get_sentiment`:

```{r, eval=FALSE}
get_sentiments("afinn")
```

The `nrc` lexicon provide several different sentiments. Note that this also has to be downloaded the first time you use it.

```{r}
get_sentiments("nrc") |> count(sentiment)
```

For our analysis, we are interested in exploring the different sentiments of each tweet so we will use the `nrc` lexicon:

```{r}
nrc <- get_sentiments("nrc") |> select(word, sentiment)
```

We can combine the words and sentiments using `inner_join`, which will only keep words associated with a sentiment. Here are 5 random words extracted from the tweets:

```{r}
tweet_words |> inner_join(nrc, by = "word", relationship = "many-to-many") |> 
  select(source, word, sentiment) |> 
  sample_n(5)
```

:::{.callout-note}
`relationship = "many-to-many"` is added to address a warning that arises from `left_join` detecting an "unexpected many-to-many relationship". However, this behavior is actually expected in this context because many words have multiple sentiments associated with them.
:::

Now we are ready to perform a quantitative analysis comparing Android and iPhone by comparing the sentiments of the tweets posted from each device. Here we could perform a tweet-by-tweet analysis, assigning a sentiment to each tweet. However, this will be challenging since each tweet will have several sentiments attached to it, one for each word appearing in the lexicon. For illustrative purposes, we will perform a much simpler analysis: we will count and compare the frequencies of each sentiment appearing in each device.

```{r}
sentiment_counts <- tweet_words |>
  left_join(nrc, by = "word", relationship = "many-to-many") |>
  count(source, sentiment) |>
  pivot_wider(names_from = "source", values_from = "n") |>
  mutate(sentiment = replace_na(sentiment, replace = "none"))
```

For each sentiment, we calculate its proportion relative to the total responses for  Android and iPhone, respectively, and derive the ratio of these proportions (Android proportion divided by iPhone proportion).

```{r}
sentiment_counts <- sentiment_counts |>
  mutate(p_a = Android/sum(Android), p_i = iPhone/sum(iPhone), ratio = p_a/p_i) |> 
  arrange(desc(ratio))
sentiment_counts
```

So we do see some differences and the order is interesting: the largest three sentiments are disgust, anger, and negative!

If we are interested in exploring which specific words are driving these differences, we can refer back to our `android_vs_iphone` object. For each sentiment we show the 10 largest ratios, in either direction. We exclude words appearing less than 10 times total.

```{r percent-diff-by-word, out.width="100%", echo=FALSE}
ordered_levels <- sentiment_counts$sentiment

android_vs_iphone |>
  filter(Android + iPhone >= 10) |>
  inner_join(nrc, by = "word") |>
  mutate(sentiment = factor(sentiment, levels = sentiment_counts$sentiment)) |>
  group_by(sentiment) |>
  slice_max(abs(log(ratio)), n = 10) |>
  ungroup() |> 
  mutate(word = reorder(word, -ratio)) |>
  ggplot(aes(word, ratio, fill = ratio < 1)) +
  geom_col(show.legend = FALSE) +
  scale_y_log10() +
  facet_wrap(~sentiment, scales = "free_x", nrow = 2) + 
  theme(axis.text.x = element_text(angle = 90, hjust = 1)) 
```

This is just a simple example of the many analyses one can perform with tidytext. To learn more, we again recommend the Tidy Text Mining book[^text-analysis-4].

[^text-analysis-4]: <https://www.tidytextmining.com/>

## Exercises

Project Gutenberg is a digital archive of public domain books. The R package **gutenbergr** facilitates the importation of these texts into R.

You can install and load by typing:

```{r, eval=FALSE}
install.packages("gutenbergr")
library(gutenbergr)
```

You can see the books that are available like this:

```{r, eval=FALSE}
gutenberg_metadata
```

1\. Use `str_detect` to find the ID of the novel *Pride and Prejudice*.

2\. We notice that there are several versions. The `gutenberg_works()` function filters this table to remove replicates and include only English language works. Read the help file and use this function to find the ID for *Pride and Prejudice*.

3\. Use the `gutenberg_download` function to download the text for Pride and Prejudice. Save it to an object called `book`.

4\. Use the **tidytext** package to create a tidy table with all the words in the text. Save the table in an object called `words`

5\. We will later make a plot of sentiment versus location in the book. For this, it will be useful to add a column with the word number to the table.

6\. Remove the stop words and numbers from the `words` object. Hint: use the `anti_join`.

7\. Now use the `AFINN` lexicon to assign a sentiment value to each word.

8\. Make a plot of sentiment score versus location in the book and add a smoother.

9\. Assume there are 300 words per page. Convert the locations to pages and then compute the average sentiment in each page. Plot that average score by page. Add a smoother that appears to go through data.
